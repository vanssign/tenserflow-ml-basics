var activeCasesObj = {
    0: 47,
    1: 60,
    2: 73,
    3: 70,
    4: 72,
    5: 95,
    6: 99,
    7: 120,
    8: 134,
    9: 149,
    10: 196,
    11: 256,
    12: 329,
    13: 424,
    14: 469,
    15: 553,
    16: 634,
    17: 640,
    18: 810,
    19: 901,
    20: 1118,
    21: 1238,
    22: 1649,
    23: 1860,
    24: 2322,
    25: 2784,
    26: 3219,
    27: 3851,
    28: 4312,
    29: 4714,
    30: 5218,
    31: 6039,
    32: 6634,
    33: 7409,
    34: 8048,
    35: 9272,
    36: 10197,
    37: 10824,
    38: 11616,
    39: 12289,
    40: 13295,
    41: 14255,
    42: 15122,
    43: 15859,
    44: 16689,
    45: 17915,
    46: 18953,
    47: 20177,
    48: 21132,
    49: 22010,
    50: 22904,
    51: 24162,
    52: 25148,
    53: 26535,
    54: 28070,
    55: 29685,
    56: 31967,
    57: 33514,
    58: 35902,
    59: 37916,
    60: 39834,
    61: 41472,
    62: 44029,
    63: 46008,
    64: 47480,
    65: 49219,
    66: 51401,
    67: 52805,
    68: 53946,
    69: 56316,
    70: 58802,
    71: 61149,
    72: 63624,
    73: 66330,
    74: 69597,
    75: 73560,
    76: 77103,
    77: 80722,
    78: 83004,
    79: 86110,
    80: 89987,
    81: 86422,
    82: 89995,
    83: 93322,
    84: 97581,
    85: 101497,
    86: 106737,
    87: 110960,
    88: 115942,
    89: 120406,
    90: 124981,
    91: 129813,
    92: 133632,
    93: 137448,
    94: 141842,
    95: 145779,
    96: 149348,
    97: 153106,
    98: 153178,
    99: 155227,
    100: 160384,
    101: 163248,
    102: 168269,
    103: 169451,
    104: 174387,
    105: 178014,
    106: 183022,
    107: 186514,
    108: 189463,
    109: 197387,
    110: 203051,
    111: 210120,
    112: 215125,
    113: 220114,
    114: 226947,
    115: 227439,
    116: 235433,
    117: 244814,
    118: 253287,
    119: 259557,
    120: 264944,
    121: 269789,
    122: 276682,
    123: 283407,
    124: 292258,
    125: 301609,
    126: 311565,
    127: 319840,
    128: 331146,
    129: 342473,
    130: 358692,
    131: 373379,
    132: 390459,
    133: 402529,
    134: 411133,
    135: 426167,
    136: 440135,
    137: 456071,
    138: 467882,
    139: 485114,
    140: 496988,
    141: 509447,
    142: 528242,
    143: 545318,
    144: 565103,
    145: 567730,
    146: 579357,
    147: 586298,
    148: 586244,
    149: 595501,
    150: 607384,
    151: 619088,
    152: 628747,
    153: 634945,
    154: 639929,
    155: 643948,
    156: 653622,
    157: 661595,
    158: 668220,
    159: 677444,
    160: 676900,
    161: 673166,
    162: 676514,
    163: 686395,
    164: 692028,
    165: 697330,
    166: 707668,
    167: 710771,
    168: 704348,
    169: 707267,
    170: 725991,
    171: 742023,
    172: 752424,
    173: 765302,
    174: 781975,
    175: 785996,
    176: 801282,
    177: 815538,
    178: 831124,
    179: 846395,
    180: 862320,
    181: 882542,
    182: 883697,
    183: 897394,
    184: 919018,
    185: 943480,
    186: 958316,
    187: 973175,
    188: 986598,
    189: 990061,
    190: 995933,
    191: 1009976,
    192: 1017754,
    193: 1013964,
    194: 1010824,
    195: 1003299,
    196: 975861,
    197: 968377,
    198: 969251,
    199: 970116,
    200: 960969,
    201: 956402,
    202: 962640,
    203: 947576,
    204: 940441,
    205: 941334,
    206: 942217,
    207: 944996,
    208: 939718,
    209: 934427,
    210: 919023,
    211: 910737,
    212: 902425,
    213: 893592,
    214: 883185,
    215: 867496,
    216: 861853,
    217: 838729,
    218: 826876,
    219: 812390,
    220: 804528,
    221: 795087,
    222: 783311,
    223: 772055,
    224: 748538,
    225: 740090,
    226: 715812,
    227: 695509,
    228: 680680,
    229: 668154,
    230: 653717,
    231: 625857,
    232: 610803,
    233: 603687,
    234: 594386,
    235: 582649,
    236: 570458,
    237: 561908,
    238: 541405,
    239: 533787,
    240: 527962,
    241: 520773,
    242: 516632,
    243: 512665,
    244: 509673,
    245: 501214,
    246: 494657,
    247: 489294,
    248: 484547,
    249: 480719,
    250: 479216,
    251: 465478,
    252: 453401,
    253: 446805,
    254: 443303,
    255: 443794,
    256: 439747,
    257: 440962,
    258: 443486,
    259: 438667,
    260: 444746,
    261: 452344,
    262: 455555,
    263: 454940,
    264: 453956,
    265: 446952,
    266: 435603,
    267: 428644,
    268: 422943,
    269: 416082,
    270: 409689,
    271: 403248,
    272: 396729,
    273: 383866,
    274: 378909,
    275: 372293,
    276: 363749,
    277: 359819,
    278: 356546,
    279: 352586,
    280: 339820,
    281: 332002,
    282: 322366,
    283: 313831,
    284: 308751,
    285: 305344,
    286: 303639,
    287: 292518,
    288: 289240,
    289: 283849,
    290: 281919,
    291: 281667,
    292: 278690,
    293: 277301,
    294: 268581,
    295: 262272,
    296: 257656,
    297: 254254,
    298: 250183,
    299: 247220,
    300: 243953,
    301: 231036,
    302: 227546,
    303: 228083,
    304: 225449,
    305: 224190,
    306: 223335,
    307: 222526,
    308: 216558,
    309: 214507,
    310: 213603,
    311: 213027,
    312: 211033,
    313: 208826,
    314: 208012,
    315: 200528,
    316: 197201,
    317: 192308,
    318: 188688,
    319: 185662,
    320: 184408,
    321: 184182,
    322: 177266,
    323: 176498,
    324: 173740,
    325: 171686,
    326: 169824,
    327: 168784,
    328: 168235,
    329: 163353,
    330: 160057,
    331: 155025,
    332: 151460,
    333: 148590,
    334: 148766,
    335: 148609,
    336: 143625,
    337: 141511,
    338: 142562,
    339: 135926,
    340: 136571,
    341: 137567,
    342: 139637,
    343: 136872,
    344: 136549,
    345: 137342,
    346: 139542,
    347: 143127,
    348: 145634,
    349: 150055,
    350: 147306,
    351: 146907,
    352: 151708,
    353: 155986,
    354: 159590,
    355: 164511,
    356: 168627,
    357: 168358,
    358: 170126,
    359: 173413,
    360: 176319,
    361: 180304,
    362: 184523,
    363: 188747,
    364: 187462,
    365: 184598,
    366: 189226,
    367: 197237,
    368: 202022,
    369: 210544,
    370: 219262,
    371: 223432,
    372: 234406,
    373: 252364,
    374: 271282,
    375: 288394,
    376: 309087,
    377: 334646,
    378: 345377,
    379: 368457,
    380: 395192,
    381: 421066,
    382: 452647,
    383: 486310,
    384: 521808,
    385: 540720,
    386: 552566,
    387: 584055,
    388: 614696,
    389: 658909,
    390: 691597,
    391: 741830,
    392: 788223,
    393: 843473,
    394: 910319,
    395: 979608,
    396: 1046631,
    397: 1108087,
    398: 1201009,
    399: 1264698,
    400: 1365704,
    401: 1471877,
    402: 1569743,
    403: 1679740,
    404: 1801316,
    405: 1929329,
    406: 2031977,
    407: 2157538,
    408: 2291428,
    409: 2428616,
    410: 2552940,
    411: 2682751,
    412: 2813658,
    413: 2882204,
    414: 2978709,
    415: 3084814,
    416: 3170228,
    417: 3268710,
    418: 3349644,
    419: 3413642,
    420: 3447133,
    421: 3487229,
    422: 3566398,
    423: 3645164,
    424: 3723446,
    425: 3736648.00,
    426: 3745237.00,
    427: 3715221.00,
    428: 3704099.00,
    429: 3710525.00,
    430: 3704893.00,
    431: 3673802.00,
    432: 3618458.00,
    433: 3353765.00,
    434: 3353765.00,
    435: 3129878.00,
    436: 3027925.00,
    437: 3027925.00,
    438: 2805399.00,
    439: 2805399.00,
    440: 2720716.00,
    441: 2586782.00,
    442: 2495591.00,
    443: 2419907.00,
    444: 2343152.00,
    445: 2228724.00,
    446: 2114508.00,
    447: 2026092.00,
    448: 1895520.00,
    449: 1713413.00,
    450: 1713413.00,
    451: 1555248.00,
    452: 1478088.00
}

let x_vals = [];
let y_vals = [];


let m, b;

const learning_rate = 0.005;

function mapX(val) {
    return map(val, 0, width, 0, 50)
}
function demapX(val) {
    return map(val, 0, 50, 0, width)
}

function mapY(val) {
    return map(val, 0, height, 1, 0)
}
function demapY(val) {
    return map(val, 1, 0, 0, height)
}

const opt = tf.train.sgd(learning_rate);

function setup() {
    createCanvas(screen.width*95/100, screen.height*14/20);
    background(0);
    m = tf.scalar(random(1)).variable();
    b = tf.scalar(random(1)).variable();
    for (let i = 0; i + 432 < 453; i++) {
        y_vals[i] = activeCasesObj[`${i + 432}`] / 4000000;
        x_vals[i] = i;
    }
}

function loss(guess, actualVal) {
    return guess.sub(actualVal).square().mean();
}

// function mousePressed() {
//     // let x = mapX(mouseX);
//     // let y = mapY(mouseY);
//     x_vals.push(x_vals.length);
//     y_vals.push(activeCasesObj[`${y_vals.length+432}`]/4000000);
// }

function predict(x) {
    const xs = tf.tensor1d(x);
    // y = mx + b;
    const ys = xs.mul(m).add(b);
    return ys;
}


function draw() {

    tf.tidy(() => {
        if (x_vals.length > 0) {
            const ys = tf.tensor1d(y_vals);
            opt.minimize(() => loss(predict(x_vals), ys));
        }

        background(0);
        stroke('red');
        strokeWeight(4);
        for (let i = 0; i < x_vals.length; i++) {
            let px = demapX(x_vals[i]);
            let py = demapY(y_vals[i]);
            point(px, py);
        }

        const yEndPoints = predict([0, 100]);
        let liney = yEndPoints.dataSync();
        stroke('white')
        strokeWeight(3);
        line(demapX(0), demapY(liney[0]), demapX(100), demapY(liney[1]))
        const nextDay = predict([21]);
        document.getElementById("prediction").innerText = nextDay.dataSync() * 4000000;
    })
}

document.getElementById("predict").addEventListener("click", function () {
    const nextDay = predict([x_vals.length]);
    document.getElementById("prediction").innerText = nextDay.dataSync() * 4000000;
})